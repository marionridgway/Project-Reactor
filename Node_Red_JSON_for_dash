[
    {
        "id": "95d3bba1d96f4281",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3cc42ca5b8628eba",
        "type": "serial-port",
        "name": "Reactor Port 1",
        "serialport": "/dev/cu.usbmodemF0F5BD5409202",
        "serialbaud": "9600",
        "databits": 8,
        "parity": "none",
        "stopbits": 1,
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": 10000
    },
    {
        "id": "9a23896a4a104cc1",
        "type": "ui_tab",
        "name": "Main Dashboard",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cee63b3fbad6891e",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "29ae2c7351db99a7",
        "type": "ui_group",
        "name": "Reactor Controls",
        "tab": "9a23896a4a104cc1",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "df00be5385a8d798",
        "type": "serial in",
        "z": "95d3bba1d96f4281",
        "name": "",
        "serial": "3cc42ca5b8628eba",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "32aadab39859925d",
                "9f79e26cdcbb0859",
                "56e9940c2cc0e78a",
                "2f43ba2209cff1da"
            ]
        ]
    },
    {
        "id": "9bd4cde288e1ebdc",
        "type": "serial out",
        "z": "95d3bba1d96f4281",
        "name": "",
        "serial": "3cc42ca5b8628eba",
        "x": 780,
        "y": 540,
        "wires": []
    },
    {
        "id": "32aadab39859925d",
        "type": "debug",
        "z": "95d3bba1d96f4281",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 20,
        "wires": []
    },
    {
        "id": "64d1a564e92e47eb",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Parse Temp",
        "func": "msg.payload = msg.payload.temp;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 140,
        "wires": [
            [
                "39bcc0a7be7bcbfc",
                "12c75ca90d8b8cd5"
            ]
        ]
    },
    {
        "id": "39bcc0a7be7bcbfc",
        "type": "ui_gauge",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 6,
        "width": "8",
        "height": "4",
        "gtype": "gage",
        "title": "Temperature °C",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ebf38f",
            "#ff6a00",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 120,
        "y": 200,
        "wires": []
    },
    {
        "id": "12c75ca90d8b8cd5",
        "type": "ui_chart",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 5,
        "width": "8",
        "height": "4",
        "label": "Temperature Trend",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No Temp Reading Yet",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff2600",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#ff2600",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 130,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "b7a9ec7aa40e9cae",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Parse UV1",
        "func": "msg.payload = msg.payload.uv1;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 60,
        "wires": [
            [
                "ec16099eaa902563"
            ]
        ]
    },
    {
        "id": "ec16099eaa902563",
        "type": "ui_gauge",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 7,
        "width": "8",
        "height": "4",
        "gtype": "gage",
        "title": "UV Index ",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#94e3fe",
            "#00c7fc",
            "#006d8f"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "13c7cfff84d0e706",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Parse Photodiode",
        "func": "msg.payload = msg.payload.photodiode;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 120,
        "wires": [
            [
                "5a5cc85d8829e242"
            ]
        ]
    },
    {
        "id": "5a5cc85d8829e242",
        "type": "ui_gauge",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 8,
        "width": "8",
        "height": "4",
        "gtype": "gage",
        "title": "Photodiode Voltage",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "5",
        "colors": [
            "#94e3fe",
            "#00c7fc",
            "#006d8f"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 850,
        "y": 100,
        "wires": []
    },
    {
        "id": "c67c752f5b6cefd1",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Parse Turbidity 1",
        "func": "msg.payload = msg.payload.turbidity;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 180,
        "wires": [
            [
                "2359a49831153917"
            ]
        ]
    },
    {
        "id": "2359a49831153917",
        "type": "ui_chart",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 9,
        "width": "8",
        "height": "4",
        "label": "Turbidity Trend",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No Turbidity Data Yet",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff40ff",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#ff40ff",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "11e7658731726286",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Parse RGB1",
        "func": "let r = msg.payload.rgb1_r || 0;\nlet g = msg.payload.rgb1_g || 0;\nlet b = msg.payload.rgb1_b || 0;\n\nreturn [\n    { topic: \"RGB1_R\", payload: r },\n    { topic: \"RGB1_G\", payload: g },\n    { topic: \"RGB1_B\", payload: b }\n];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 280,
        "wires": [
            [
                "5753c5434f0e1f41"
            ],
            [
                "5753c5434f0e1f41"
            ],
            [
                "5753c5434f0e1f41"
            ]
        ]
    },
    {
        "id": "5753c5434f0e1f41",
        "type": "ui_chart",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 11,
        "width": "8",
        "height": "4",
        "label": "RGB Trend 1 (position 2)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff2600",
            "#00f900",
            "#0433ff",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 630,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "d773bd26ab41018c",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Parse RGB Colour 1",
        "func": "let r = msg.payload.rgb1_r || 0;\nlet g = msg.payload.rgb1_g || 0;\nlet b = msg.payload.rgb1_b || 0;\n\nfunction rgbToHex(r, g, b) {\n    return \"#\" + [r, g, b].map(x => {\n        const hex = x.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }).join('');\n}\n\nmsg.payload = rgbToHex(r, g, b);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "9820292d23c64269"
            ]
        ]
    },
    {
        "id": "9820292d23c64269",
        "type": "ui_colour_picker",
        "z": "95d3bba1d96f4281",
        "name": "",
        "label": "Colour Preview",
        "group": "29ae2c7351db99a7",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": false,
        "showValue": false,
        "showHue": false,
        "showAlpha": false,
        "showLightness": true,
        "square": "false",
        "dynOutput": "false",
        "order": 12,
        "width": "8",
        "height": "1",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 620,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "f4bebfc9a8063397",
        "type": "ui_slider",
        "z": "95d3bba1d96f4281",
        "name": "",
        "label": "Pump Dose Volume mL",
        "tooltip": "",
        "group": "29ae2c7351db99a7",
        "order": 15,
        "width": "8",
        "height": "2",
        "passthru": true,
        "outs": "end",
        "topic": "pumpVolume",
        "topicType": "msg",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 270,
        "y": 560,
        "wires": [
            [
                "237c2c509dfc0aa1"
            ]
        ]
    },
    {
        "id": "8d04289e57a8aa2b",
        "type": "ui_slider",
        "z": "95d3bba1d96f4281",
        "name": "",
        "label": "Pump Speed",
        "tooltip": "",
        "group": "29ae2c7351db99a7",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "pumpSpeed",
        "topicType": "msg",
        "min": 0,
        "max": "89",
        "step": 1,
        "className": "",
        "x": 230,
        "y": 600,
        "wires": [
            [
                "e662e5f7efc467c7"
            ]
        ]
    },
    {
        "id": "93c8a716cb1f07f2",
        "type": "ui_button",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 17,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Pump Send",
        "tooltip": "",
        "color": "",
        "bgcolor": "pink",
        "className": "",
        "icon": "",
        "payload": "start",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 640,
        "wires": [
            [
                "5a5920a445d58b8d"
            ]
        ]
    },
    {
        "id": "237c2c509dfc0aa1",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Store Volume",
        "func": "flow.set(\"pumpVolume\", msg.payload);\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "e662e5f7efc467c7",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Store Speed",
        "func": "flow.set(\"pumpSpeed\", msg.payload);\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5a5920a445d58b8d",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Build Pump Command",
        "func": "let speed = flow.get(\"pumpSpeed\") || 0;\nlet volume = flow.get(\"pumpVolume\") || 0;\nlet lastCommand = context.get(\"lastPump1Command\") || \"\";\n\nlet command = `pump:${volume.toFixed(2)} at speed:${speed}`;\n\n// Only send if it's new (not a repeat)\nif (command !== lastCommand) {\n    context.set(\"lastPump1Command\", command);\n    msg.payload = command;\n    return msg;\n} else {\n    return null;  // Prevent repeat\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 640,
        "wires": [
            [
                "9bd4cde288e1ebdc"
            ]
        ]
    },
    {
        "id": "9f79e26cdcbb0859",
        "type": "json",
        "z": "95d3bba1d96f4281",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 290,
        "y": 80,
        "wires": [
            [
                "64d1a564e92e47eb",
                "b7a9ec7aa40e9cae",
                "13c7cfff84d0e706",
                "c67c752f5b6cefd1",
                "11e7658731726286",
                "d773bd26ab41018c",
                "6107b53e239e1571",
                "7502bbe6df9f7170",
                "72f3c5b839077bd9",
                "3a79569d86fa4a70",
                "83669942d0c53db6"
            ]
        ]
    },
    {
        "id": "6107b53e239e1571",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Parse RGB2",
        "func": "let r = msg.payload.rgb2_r || 0;\nlet g = msg.payload.rgb2_g || 0;\nlet b = msg.payload.rgb2_b || 0;\n\nreturn [\n    { topic: \"RGB2_R\", payload: r },\n    { topic: \"RGB2_G\", payload: g },\n    { topic: \"RGB2_B\", payload: b }\n];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 400,
        "wires": [
            [
                "cd6951755495bb73"
            ],
            [
                "cd6951755495bb73"
            ],
            [
                "cd6951755495bb73"
            ]
        ]
    },
    {
        "id": "cd6951755495bb73",
        "type": "ui_chart",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 13,
        "width": "8",
        "height": "4",
        "label": "RGB Trend 2 (position 1)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff2600",
            "#00f900",
            "#0433ff",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 630,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "7502bbe6df9f7170",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Parse RGB 2 Colour 2",
        "func": "let r = msg.payload.rgb2_r || 0;\nlet g = msg.payload.rgb2_g || 0;\nlet b = msg.payload.rgb2_b || 0;\n\nfunction rgbToHex(r, g, b) {\n    return \"#\" + [r, g, b].map(x => {\n        const hex = x.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }).join('');\n}\n\nmsg.payload = rgbToHex(r, g, b);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 460,
        "wires": [
            [
                "fa9e9913940e94bb"
            ]
        ]
    },
    {
        "id": "fa9e9913940e94bb",
        "type": "ui_colour_picker",
        "z": "95d3bba1d96f4281",
        "name": "",
        "label": "Colour Preview 2",
        "group": "29ae2c7351db99a7",
        "format": "hex",
        "outformat": "string",
        "showSwatch": true,
        "showPicker": false,
        "showValue": false,
        "showHue": false,
        "showAlpha": false,
        "showLightness": true,
        "square": "false",
        "dynOutput": "false",
        "order": 14,
        "width": "8",
        "height": "1",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 590,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "72f3c5b839077bd9",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Parse Turbidity 2",
        "func": "msg.payload = msg.payload.turbidity2;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 220,
        "wires": [
            [
                "70b69915978b8169"
            ]
        ]
    },
    {
        "id": "70b69915978b8169",
        "type": "ui_chart",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 10,
        "width": 0,
        "height": 0,
        "label": "Turbidity Trend 2",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "bb2927e802b54643",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Store Pump 2 Volume",
        "func": "flow.set(\"pump2_volume\", msg.payload);\nreturn null; // don’t forward this\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "ba0a06e2ee69601d",
        "type": "ui_slider",
        "z": "95d3bba1d96f4281",
        "name": "",
        "label": "Pump 2 Dose",
        "tooltip": "",
        "group": "29ae2c7351db99a7",
        "order": 19,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "0.01",
        "max": "0.9",
        "step": "0.01",
        "className": "",
        "x": 320,
        "y": 720,
        "wires": [
            [
                "bb2927e802b54643"
            ]
        ]
    },
    {
        "id": "3c9dcfbb87399dc9",
        "type": "ui_button",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 20,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Pump 2 Send",
        "tooltip": "",
        "color": "",
        "bgcolor": "pink",
        "className": "",
        "icon": "",
        "payload": "start",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 320,
        "y": 760,
        "wires": [
            [
                "1f49bb5019e21fa9"
            ]
        ]
    },
    {
        "id": "1f49bb5019e21fa9",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Build Pump 2 Command",
        "func": "let vol = flow.get(\"pump2_volume\") || 0;\nmsg.payload = \"pump2:\" + vol.toFixed(2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 760,
        "wires": [
            [
                "9bd4cde288e1ebdc"
            ]
        ]
    },
    {
        "id": "bd27b11a3d2648ed",
        "type": "ui_slider",
        "z": "95d3bba1d96f4281",
        "name": "",
        "label": "Light Intensity ",
        "tooltip": "",
        "group": "29ae2c7351db99a7",
        "order": 21,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "255",
        "step": 1,
        "className": "",
        "x": 340,
        "y": 840,
        "wires": [
            [
                "404d8b3d8731fb63"
            ]
        ]
    },
    {
        "id": "210c25e14b3ac2e4",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Send UV Command",
        "func": "let intensity = flow.get(\"uv_intensity\") || 128; // default if none set\n\nif (msg.payload === \"send_on\") {\n    msg.payload = `led on at intensity:${intensity}\\n`;\n    return msg;\n} else if (msg.payload === \"send_off\") {\n    msg.payload = \"led off\\n\";\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 880,
        "wires": [
            [
                "9bd4cde288e1ebdc"
            ]
        ]
    },
    {
        "id": "404d8b3d8731fb63",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Store Light Intensity",
        "func": "flow.set(\"uv_intensity\", msg.payload);\nreturn null; // Do not send anything now\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "38f4ad223be7778b",
        "type": "ui_button",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 22,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "LED Send ON",
        "tooltip": "",
        "color": "white",
        "bgcolor": "pink",
        "className": "",
        "icon": "",
        "payload": "send_on",
        "payloadType": "str",
        "topic": "send_command",
        "topicType": "msg",
        "x": 360,
        "y": 880,
        "wires": [
            [
                "210c25e14b3ac2e4"
            ]
        ]
    },
    {
        "id": "ed07d8db950a4974",
        "type": "ui_button",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 23,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "LED Send OFF",
        "tooltip": "",
        "color": "",
        "bgcolor": "pink",
        "className": "",
        "icon": "",
        "payload": "send_off",
        "payloadType": "str",
        "topic": "send_command",
        "topicType": "msg",
        "x": 380,
        "y": 920,
        "wires": [
            [
                "210c25e14b3ac2e4"
            ]
        ]
    },
    {
        "id": "cf1e19f85e7ab689",
        "type": "ui_toast",
        "z": "95d3bba1d96f4281",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Startup Message Notification",
        "x": 120,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "6a8e6638fc2dec73",
        "type": "inject",
        "z": "95d3bba1d96f4281",
        "name": "Start Message",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "Welcome to the Control Dashboard! Ensure to run water through reactor before initiating use.",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 360,
        "wires": [
            [
                "cf1e19f85e7ab689"
            ]
        ]
    },
    {
        "id": "56e9940c2cc0e78a",
        "type": "tcp out",
        "z": "95d3bba1d96f4281",
        "name": "Python Sender",
        "host": "localhost",
        "port": "9000",
        "beserver": "client",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 140,
        "y": 480,
        "wires": []
    },
    {
        "id": "2f43ba2209cff1da",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Generate Reccomendations",
        "func": "// Convert incoming JSON string to an object\nlet data = (typeof msg.payload === 'string') ? JSON.parse(msg.payload) : msg.payload || {};\nlet recommendations = [];\n\n// Turbidity rule\nif (data.turbidity > 3.2) {\n    recommendations.push(\"Solution is considered colourless.\");\n}\n\n// Photodiode rule\nif (data.photodiode < 0.3) {\n    recommendations.push(\"Increase UV LED intensity — low light transmission.\");\n}\n\n// Temperature rule\nif (data.temp > 45) {\n    recommendations.push(\"Temperature near unsafe levels.\");\n}\n\n// --- Colourless detection function ---\nfunction checkColourless(r, g, b, label) {\n    const DELTA_MAX = 20;   // closeness threshold for R, G, B\n    const BRIGHT_MAX = 500; // overall brightness threshold\n\n    const rgbMax = Math.max(r, g, b);\n    const rgbMin = Math.min(r, g, b);\n    const rgbDelta = rgbMax - rgbMin;\n    const rgbSum = r + g + b;\n\n    if (rgbDelta <= DELTA_MAX && rgbSum <= BRIGHT_MAX) {\n        recommendations.push(`${label} observed: colourless.`);\n    }\n}\n\n// Apply to RGB1 and RGB2\nif (typeof data.rgb1_r === \"number\" && typeof data.rgb1_g === \"number\" && typeof data.rgb1_b === \"number\") {\n    checkColourless(data.rgb1_r, data.rgb1_g, data.rgb1_b, \"RGB1\");\n}\nif (typeof data.rgb2_r === \"number\" && typeof data.rgb2_g === \"number\" && typeof data.rgb2_b === \"number\") {\n    checkColourless(data.rgb2_r, data.rgb2_g, data.rgb2_b, \"RGB2\");\n}\n\n// Output\nif (recommendations.length === 0) {\n    msg.payload = \"System stable — no changes suggested.\";\n} else {\n    msg.payload = recommendations.join(\"\\n\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 980,
        "wires": [
            [
                "40fd5179b32e03a7"
            ]
        ]
    },
    {
        "id": "40fd5179b32e03a7",
        "type": "ui_template",
        "z": "95d3bba1d96f4281",
        "group": "29ae2c7351db99a7",
        "name": "Reccomemdation + Auto Adjust",
        "order": 4,
        "width": "8",
        "height": "2",
        "format": "<div style=\"text-align:center;\">\n    <p>{{msg.payload}}</p>\n    <md-button class=\"md-raised md-primary\" ng-click=\"send({topic:'auto_uv'})\">\n        Auto Adjust UV\n    </md-button>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 410,
        "y": 1040,
        "wires": [
            [
                "7be7b7d865b1535a"
            ]
        ]
    },
    {
        "id": "7be7b7d865b1535a",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Translate Auto Adjust",
        "func": "if (msg.topic === \"auto_uv\") {\n    // Turn on LED at fixed intensity when button is pressed\n    return { payload: \"led intensity:255 led on\" };\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1040,
        "wires": [
            [
                "9bd4cde288e1ebdc"
            ]
        ]
    },
    {
        "id": "447d5a655f8186ed",
        "type": "ui_text",
        "z": "95d3bba1d96f4281",
        "group": "29ae2c7351db99a7",
        "order": 18,
        "width": "8",
        "height": "3",
        "name": "",
        "label": "FlowRate (mL/s)",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 880,
        "y": 340,
        "wires": []
    },
    {
        "id": "3a79569d86fa4a70",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Parse FlowRate",
        "func": "msg.payload = msg.payload.flowRate;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": [
            [
                "447d5a655f8186ed"
            ]
        ]
    },
    {
        "id": "895a360d3f88f444",
        "type": "ui_form",
        "z": "95d3bba1d96f4281",
        "name": "",
        "label": "User Form",
        "group": "29ae2c7351db99a7",
        "order": 1,
        "width": "8",
        "height": "8",
        "options": [
            {
                "label": "Exp No",
                "value": "expNo",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Operator",
                "value": "operator",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Reaction Description",
                "value": "description",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Reagents (CAS)",
                "value": "reagent",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Concentration",
                "value": "concentration",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "expNo": "",
            "operator": "",
            "description": "",
            "reagent": "",
            "concentration": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "experiment",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 390,
        "y": 1140,
        "wires": [
            [
                "a0ed58c941c51163"
            ]
        ]
    },
    {
        "id": "a0ed58c941c51163",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Store Form Data",
        "func": "// Save the form data for later use by Start button\nflow.set(\"lastExperimentForm\", msg.payload);\nreturn null;  // Do not send anything yet\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "2eb50b7bb4806e08",
        "type": "ui_button",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 2,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "Start Experiment",
        "tooltip": "",
        "color": "",
        "bgcolor": "#3FADB5",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 450,
        "y": 1200,
        "wires": [
            [
                "713d61580a7a0628"
            ]
        ]
    },
    {
        "id": "731eb0e73454d1ee",
        "type": "ui_button",
        "z": "95d3bba1d96f4281",
        "name": "",
        "group": "29ae2c7351db99a7",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "Stop Experiment",
        "tooltip": "",
        "color": "",
        "bgcolor": "#3FADB5",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 470,
        "y": 1260,
        "wires": [
            [
                "051c4c9669e63790"
            ]
        ]
    },
    {
        "id": "713d61580a7a0628",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Build Setup Start Function",
        "func": "\n// Get form data (make sure the form node stores its payload to flow variable)\nlet form = flow.get(\"lastExperimentForm\");\nif (!form) {\n    node.warn(\"No experiment form submitted yet!\");\n    return null;\n}\n\nmsg.payload = JSON.stringify({\n    type: \"setup\",\n    experiment: {\n        expNo: form.expNo,            // Matches your form \"Name\" field exactly\n        operator: form.operator,\n        description: form.description,\n        reagents: [\n            {\n                name: form.reagent,\n                concentration: parseFloat(form.concentration || 0)\n            }\n        ]\n    }\n}) + \"\\n\";  // newline so Python reads as full message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1200,
        "wires": [
            [
                "56e9940c2cc0e78a",
                "30a753c5e4162c6d"
            ]
        ]
    },
    {
        "id": "051c4c9669e63790",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Stop Function",
        "func": "msg.payload = JSON.stringify({ type: \"stop\" }) + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1260,
        "wires": [
            [
                "56e9940c2cc0e78a"
            ]
        ]
    },
    {
        "id": "30a753c5e4162c6d",
        "type": "debug",
        "z": "95d3bba1d96f4281",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1140,
        "wires": []
    },
    {
        "id": "83669942d0c53db6",
        "type": "function",
        "z": "95d3bba1d96f4281",
        "name": "Parse LED State/Intensity",
        "func": "let state = msg.payload.uvLed;\nlet intensity = msg.payload.uvIntensity;\n\nif (state === 1) {\n    msg.payload = `💡 UV LED is ON at intensity ${intensity}`;\n} else {\n    msg.payload = `🔌 UV LED is OFF`;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "930ff9fdba3129ca"
            ]
        ]
    },
    {
        "id": "930ff9fdba3129ca",
        "type": "ui_text",
        "z": "95d3bba1d96f4281",
        "group": "29ae2c7351db99a7",
        "order": 23,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "LED Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 500,
        "wires": []
    }
]
